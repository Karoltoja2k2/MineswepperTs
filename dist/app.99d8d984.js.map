{"version":3,"sources":["objects/Point.ts","objects/Field.ts","objects/MapGenerator.ts","components/game.ts","app.ts"],"names":[],"mappings":"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","file":"app.99d8d984.js","sourceRoot":"..\\src","sourcesContent":["export class Point {\r\n    col: number;\r\n    row: number;\r\n    avoid:boolean;\r\n    constructor(row: number, column: number){\r\n        this.col = column;\r\n        this.row = row;\r\n        this.avoid = false; \r\n    }\r\n\r\n    Add_Point(toAdd: Point){\r\n        return new Point(this.row + toAdd.row, this.col + toAdd.col)\r\n    }\r\n\r\n    Inside_Boundries(rows:number, columns:number){\r\n        if(this.row < 0 || this.row >= rows || this.col < 0 || this.col >= columns){\r\n            return false;\r\n        } \r\n        return true;\r\n    }\r\n\r\n    ToString(){\r\n        return `${this.row}-${this.col}`\r\n    }\r\n}","import { Point } from \"./Point\";\r\n\r\nexport class Field{\r\n    pnt:Point\r\n    btn:HTMLButtonElement\r\n    isBomb:boolean\r\n    isFlag:boolean\r\n    isHidden:boolean\r\n    nBombs:number\r\n    \r\n    constructor(row:number, col:number){\r\n        this.pnt = new Point(row, col)\r\n        this.btn = this.CreateFieldButton(this.pnt)\r\n        this.isBomb = false\r\n        this.isFlag = false\r\n        this.isHidden = true\r\n        this.nBombs = 0\r\n    }\r\n\r\n    RestartField(){\r\n        this.isBomb = false\r\n        this.isFlag = false\r\n        this.isHidden = true\r\n        this.nBombs = 0\r\n        this.btn.setAttribute('class', 'hidden')\r\n        this.btn.setAttribute('style', '')\r\n        this.btn.innerHTML = '';\r\n    }\r\n\r\n    CreateFieldButton(pnt:Point){\r\n        var btn = document.createElement('button');\r\n        btn.setAttribute('id', pnt.ToString())\r\n        btn.setAttribute('class', 'hidden')\r\n        return btn;\r\n    }\r\n}","import { Point } from \"./Point\"\r\nimport { Field } from \"./Field\"\r\n\r\n\r\nexport class MapGenerator{\r\n    rows:number\r\n    cols:number\r\n    bombs:number\r\n    offset:Point[] = \r\n    [\r\n        new Point(-1, -1), new Point(-1, 0), new Point(-1,  1),\r\n        new Point( 0, -1),                   new Point( 0,  1),\r\n        new Point( 1, -1), new Point( 1, 0), new Point( 1,  1)\r\n    ]\r\n\r\n    bombCordsConst:Point[];\r\n\r\n    constructor(rows:number, cols:number, bombs:number){\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n        this.bombs = bombs;\r\n        this.bombCordsConst = this.InitBombCordsConst(this.rows, this.cols);\r\n    }\r\n\r\n    GenerateMap(firstClick:Point, map: any[][]) : [Field[][], Point[]]{\r\n        var updatedMap = map.slice();\r\n        var workBombCords = this.bombCordsConst.slice();\r\n        var rows = this.rows;\r\n        var cols = this.cols\r\n        var offset = this.offset;\r\n\r\n        workBombCords[firstClick.row * cols + firstClick.col].avoid = true;        \r\n        var tempPoint;\r\n        offset.forEach(function(offPoint){\r\n            tempPoint = firstClick.Add_Point(offPoint);\r\n            if(tempPoint.Inside_Boundries(rows, cols)){\r\n                workBombCords[tempPoint.row * cols + tempPoint.col].avoid = true;\r\n            }\r\n        });\r\n\r\n        workBombCords = workBombCords.filter(x => x.avoid === false)\r\n        var chosenBombs = this.GenerateBombCord(workBombCords)\r\n        chosenBombs.forEach(function(pnt){\r\n            var fieldWithBomb:Field = updatedMap[pnt.row][pnt.col];\r\n            fieldWithBomb.isBomb = true;\r\n            offset.forEach(function(offPoint){\r\n                var toAddBomb = pnt.Add_Point(offPoint)\r\n                if(toAddBomb.Inside_Boundries(rows, cols)){\r\n                    var fieldNeighBomb:Field = updatedMap[toAddBomb.row][toAddBomb.col]\r\n                    fieldNeighBomb.nBombs += 1;\r\n                }\r\n            })\r\n        })\r\n        return [updatedMap, chosenBombs];\r\n    }\r\n\r\n    GenerateBombCord(bombCords:Point[]){\r\n        var chosenPoints = [];\r\n\r\n        var index;\r\n        for (let bombCount = 0; bombCount < this.bombs; bombCount++) {\r\n            index = this.GetRandomIndex(0, bombCords.length)\r\n            chosenPoints.push(bombCords[index]);\r\n            bombCords.splice(index, 1);            \r\n        }\r\n\r\n        return chosenPoints;\r\n    }\r\n\r\n    GetRandomIndex(min:number, max:number){\r\n        return Math.floor(Math.random() * (max - min) + min)\r\n    }\r\n\r\n\r\n\r\n\r\n    InitBombCordsConst(rows:number, cols:number){\r\n        var point;\r\n        var array = [];\r\n        for (let row = 0; row < this.rows; row++)\r\n        {\r\n            for (let column = 0; column < this.cols; column++)\r\n            {\r\n                point = new Point(row, column);\r\n                array.push(point);\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n}","const Game = () => {\r\n    var template =\r\n    `\r\n    <div class=\"background noselect\" id=\"background\">\r\n        <div class=\"gameContainer\" id=\"gameContainer\">\r\n            <div class=\"menu\">\r\n                <div class=\"counter\">\r\n                    <h1 id=\"bombCounter\">091</h1>\r\n                </div>\r\n                <button class=\"newgamebtn\" id=\"newGameBtn\"> \r\n                    <span class=\"material-icons\" style=\"font-size:36px;\">\r\n                        fiber_new\r\n                    </span>\r\n                </button>                     \r\n                <div class=\"counter\">\r\n                    <h1 id=\"timeCounter\">012</h1>\r\n                </div>\r\n            </div>\r\n            \r\n            <div class=\"grid\" id=\"grid\">\r\n            </div>            \r\n        </div> \r\n        \r\n        <button class=\"settingsbtn\" id=\"settingsBtn\">\r\n            <span class=\"material-icons\" style=\"font-size:36px;\">\r\n                settings\r\n            </span>\r\n        </button>\r\n\r\n        <div class=\"dropdown-content\" id=\"dropdown-content\">\r\n            <div class=\"bg\">\r\n            </div>\r\n            <h1>Mineswepper</h1>\r\n            <button id=\"changeSizeBtn\">Change size</button>\r\n            <input type=\"range\" min=\"10\" max=\"50\" value=\"30\" class=\"slider rangeInput\" id=\"squareSizeSlider\">\r\n            <label for\"nameInput\">Nickname</label>\r\n            <input class=\"nameInput\" type=\"text\" id=\"nameInput\">\r\n            </div>\r\n        \r\n    </div>\r\n    `;\r\n    return template;\r\n}\r\n\r\nexport default Game","import { Point } from './objects/Point'\r\nimport { Field } from './objects/Field'\r\nimport { MapGenerator } from './objects/MapGenerator';\r\n\r\nimport './styles.scss'\r\nimport Game from './components/game';\r\n\r\nlet mapGrid: Field[][];\r\nlet temporaryShownFields:Field[] = [];\r\nlet bombPoints : Point[];\r\nlet mapGenerator:MapGenerator;\r\nlet firstClick = true;\r\nlet gameOver = false;\r\nlet showBombs = false;\r\nlet run = false;\r\nlet mouseDownField:Field;\r\nlet lmbDown = false;\r\nlet rmbDown = false;\r\n\r\nlet rows = 0;\r\nlet columns = 0;\r\nlet bombs = 0;\r\nlet chosenLevel = 0;\r\nlet squareSize = 32;\r\n\r\nlet time:number;\r\nlet bombsRemaining:number;\r\nlet shownFieldsCount:number;\r\nlet bombCounter:HTMLElement;\r\nlet timeCounter:HTMLElement;\r\n\r\nlet background:HTMLElement;\r\nlet grid:HTMLElement;\r\nlet slider:HTMLInputElement;\r\nlet settingsBtn:HTMLElement;\r\nlet settingsOpen = false;\r\n\r\nconst numberColors:string[] = ['lightgray', 'darkcyan', 'green', 'darkred', 'darkslateblue', 'brown', 'seagreen', 'orange', 'black']\r\nconst backGroundColors:string[] = ['#126748', '#c3df47', '#f1ce5a', '#f1a35a', '#f16c5a']\r\n\r\n\r\nconst offset:Point[] = \r\n[\r\n    new Point(-1, -1), new Point(-1, 0), new Point(-1,  1),\r\n    new Point( 0, -1),                   new Point( 0,  1),\r\n    new Point( 1, -1), new Point( 1, 0), new Point( 1,  1)\r\n]\r\n\r\nconst app = function(){        \r\n    document.getElementById('root')!.innerHTML = Game()\r\n    SetEventListeners()\r\n    SetLevel();\r\n}\r\napp();\r\n\r\nfunction SetEventListeners(){\r\n    grid = document.getElementById('grid')!\r\n    background = document.getElementById('background')!\r\n    document.getElementById('newGameBtn')?.addEventListener('click', NewGame)\r\n    document.getElementById('changeSizeBtn')!.addEventListener('click', SetLevel)\r\n    settingsBtn = document.getElementById('settingsBtn')!\r\n    settingsBtn.addEventListener('mouseenter', SettingsWindowOpener)\r\n    SettingsWindowOpener()\r\n    document.getElementById('dropdown-content')?.addEventListener('mouseleave', SettingsWindowOpener)\r\n\r\n    var nameInput = document.getElementById('nameInput')! as HTMLInputElement\r\n    nameInput.addEventListener('input', e => {SetNickname})\r\n    var nick = window.localStorage.getItem('name')\r\n    if (nick != null && nick.trim().length != 0){\r\n        nameInput.value = nick\r\n    }\r\n    slider = document.getElementById('squareSizeSlider')! as HTMLInputElement\r\n    slider.addEventListener('input', SetSquareSize)\r\n    bombCounter = document.getElementById('bombCounter')!\r\n    timeCounter = document.getElementById('timeCounter')!\r\n}\r\n\r\nfunction SetLevel(){\r\n    if(chosenLevel < 5){\r\n        chosenLevel++;\r\n    } else {\r\n        chosenLevel = 1\r\n    }     \r\n    background.style.background = backGroundColors[chosenLevel - 1]; \r\n    switch(chosenLevel){\r\n        case 1:\r\n            SetSize(9, 9, 10)\r\n            return;\r\n        case 2:\r\n            SetSize(16, 16, 40)\r\n            return;\r\n        case 3:\r\n            SetSize(16, 30, 99)\r\n            return;\r\n        case 4:\r\n            SetSize(16, 30, 200)\r\n            return;\r\n        case 5:\r\n            SetSize(32, 60, 500)\r\n            return;\r\n    }\r\n}\r\n\r\nfunction SetSize(r:number, c:number, b:number){\r\n    rows = r;\r\n    columns = c;\r\n    bombs = b;\r\n    SetSquareSize();\r\n    RestartGameInfo();\r\n    mapGrid = new Array(rows)\r\n    for (let i = 0; i < rows; i++){\r\n        mapGrid[i]=new Array(columns)\r\n    }\r\n    grid.innerHTML = ''\r\n    for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < columns; j++) {\r\n            mapGrid[i][j] = new Field(i, j);\r\n            var btn:HTMLButtonElement = mapGrid[i][j].btn\r\n            btn.addEventListener('mousedown', MouseDown)\r\n            btn.addEventListener('mouseup', MouseUp)\r\n            btn.addEventListener('contextmenu', ContextMenu)\r\n            grid.append(btn)\r\n        }        \r\n    }        \r\n    mapGenerator = new MapGenerator(rows, columns, bombs)\r\n}\r\n\r\n\r\nfunction RestartGameInfo(){\r\n    firstClick = true;\r\n    run = false;\r\n    gameOver = false;\r\n    showBombs = false;\r\n    bombsRemaining = bombs;\r\n    time = 0;\r\n    shownFieldsCount = 0;\r\n    updateCounters()\r\n}\r\n\r\nfunction NewGame(){    \r\n    RestartGameInfo()\r\n    if (!settingsOpen){\r\n        settingsBtn.style.display = 'block';\r\n    }\r\n    for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < columns; j++) {\r\n            mapGrid[i][j].RestartField();            \r\n        }        \r\n    }    \r\n}\r\n\r\nfunction FirstClickEvent(){\r\n    firstClick = false;\r\n    run = true;\r\n    [mapGrid, bombPoints] = mapGenerator.GenerateMap(mouseDownField.pnt, mapGrid)\r\n    settingsBtn.style.display = 'none'\r\n    StartTimeCounter();\r\n}\r\n\r\nfunction GameOver(succes:boolean){\r\n    if (!settingsOpen){\r\n        settingsBtn.style.display = 'block';\r\n    }\r\n    gameOver = true;\r\n    run = false;  \r\n    showBombs = true;\r\n    var style = succes ? 'bomb-defused' : 'bomb'\r\n    ShowAllBombs(style)\r\n}\r\n\r\nfunction ShowAllBombs(style:string){\r\n    var i = 0;\r\n    var interval2 = setInterval(() => {\r\n        if(showBombs == false || i >= bombPoints.length){\r\n            clearInterval(interval2);    \r\n\r\n        } else {\r\n            var point = bombPoints[i]\r\n            mapGrid[point.row][point.col].btn.setAttribute('class', style)\r\n            console.log(i)\r\n            i++;\r\n        }\r\n    }, 1);\r\n}\r\n\r\nfunction StartTimeCounter(){\r\n    time = 0;\r\n    var interval = setInterval(() => {\r\n        if(run){\r\n            time++;\r\n            updateCounters();  \r\n        } else {\r\n            clearInterval(interval);    \r\n        }\r\n      }, 1000);\r\n};\r\n\r\nfunction updateCounters(){\r\n    if (bombsRemaining < 0 && bombsRemaining > -10){\r\n        bombCounter.innerHTML = (\"-0\" + `${bombsRemaining * -1}`)\r\n    } else if (bombsRemaining <= -10){\r\n        bombCounter.innerHTML = (\"-\" + `${bombsRemaining * -1}`)        \r\n    } else if (bombsRemaining < -99){\r\n        bombCounter.innerHTML = (\"-99\")\r\n    } else if (bombsRemaining >= 0){\r\n        bombCounter.innerHTML = (\"00\" + `${bombsRemaining}`).slice(-3)\r\n    }\r\n\r\n    if (time < 1000){\r\n        timeCounter.innerHTML = (\"00\" + `${time}`).slice(-3);\r\n    } else {\r\n        timeCounter.innerHTML = \"999\";\r\n    }\r\n}\r\n\r\nfunction SetNickname(event?:InputEvent){\r\n    var elem = <HTMLInputElement>event!.target;\r\n    if (elem.value.length < 50){\r\n        window.localStorage.setItem('name', `${elem.value}`)\r\n    }\r\n    console.log(window.localStorage.getItem('name'))\r\n}\r\n\r\nfunction SettingsWindowOpener(event?:MouseEvent){\r\n    if (!settingsOpen){\r\n        document.getElementById('dropdown-content')?.setAttribute('style', 'display: flex;')\r\n        settingsBtn.style.display = 'none'\r\n        settingsOpen = !settingsOpen;\r\n    } else {\r\n        document.getElementById('dropdown-content')?.setAttribute('style', 'display: none;')\r\n        settingsBtn.style.display = 'block'\r\n        settingsOpen = !settingsOpen;\r\n    }\r\n}\r\n\r\nfunction SetSquareSize(event?:Event){\r\n    squareSize = parseInt(slider.value)\r\n    if(squareSize * columns + 10 < 236){        \r\n        squareSize = 226 / columns;\r\n        if(event){\r\n            return;\r\n        }\r\n    } else if (squareSize * columns + 20 > window.innerWidth) {\r\n        squareSize = Math.floor((window.innerWidth - 20) / columns);\r\n\r\n        if(event){\r\n            return;\r\n        }  \r\n    }\r\n\r\n    var grid = document.getElementById('grid')\r\n    grid!.setAttribute('style', \r\n        `grid-template-columns: repeat(${columns}, ${squareSize}px);\r\n         grid-template-rows: repeat(${rows}, ${squareSize}px);\r\n         font-size: ${squareSize - 2}px`)\r\n}\r\n\r\n\r\n// MOUSE EVENT HANDLERS AND CLICK METHODS\r\n\r\nfunction ContextMenu(event:MouseEvent){\r\n    event.preventDefault()\r\n}\r\n\r\nfunction MouseDown(event:MouseEvent){\r\n    event.preventDefault()\r\n    if(gameOver){\r\n        return;\r\n    }\r\n    if (lmbDown || rmbDown){\r\n        return;\r\n    }\r\n    var btn = event.target as Element\r\n    var cords = btn.attributes[0].value.split('-')\r\n    var row = parseInt(cords[0])\r\n    var col = parseInt(cords[1])\r\n    mouseDownField = mapGrid[row][col];\r\n    if(event.button == 0){\r\n        lmbDown = true;\r\n        if(!mouseDownField.isFlag && mouseDownField.isHidden){\r\n            mouseDownField.btn.setAttribute('class', 'shown')\r\n        } else if (!mouseDownField.isHidden && !mouseDownField.isFlag) {\r\n            offset.forEach(function(offpoint){\r\n                var tempPoint = mouseDownField.pnt.Add_Point(offpoint)\r\n                if (tempPoint.Inside_Boundries(rows, columns)){\r\n                    var tempField:Field = mapGrid[tempPoint.row][tempPoint.col]\r\n                    if (tempField.isHidden && !tempField.isFlag){\r\n                        tempField.btn.setAttribute('class', 'shown')\r\n                        temporaryShownFields.push(tempField);\r\n                    }\r\n                }\r\n\r\n            })\r\n        } \r\n    } else if (event.button == 2) {\r\n        rmbDown = true;\r\n        if(mouseDownField.isHidden){\r\n            RmbClick(mouseDownField);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction MouseUp(event:MouseEvent){\r\n    event.preventDefault()\r\n    if (gameOver == true){\r\n        return;\r\n    }\r\n    if (event.button == 2){\r\n        rmbDown = false;\r\n    }\r\n    if (event.button == 0){\r\n        lmbDown = false\r\n        var btn = event.target as Element\r\n        var cords = btn.attributes[0].value.split('-')\r\n        var row = parseInt(cords[0])\r\n        var col = parseInt(cords[1])\r\n        var clickedField = mapGrid[row][col];\r\n\r\n        if (clickedField.pnt != mouseDownField.pnt){\r\n            if (mouseDownField.isHidden && !mouseDownField.isFlag){\r\n                mouseDownField.btn.setAttribute('class', 'hidden')\r\n                return;              \r\n            } else if (!mouseDownField.isHidden && !mouseDownField.isFlag){\r\n                    if (temporaryShownFields.length != 0){\r\n                        temporaryShownFields.forEach(function(field){\r\n                            field.btn.setAttribute('class', 'hidden')\r\n                        })\r\n                        temporaryShownFields = []\r\n                    }\r\n                }            \r\n        }\r\n        if (firstClick){\r\n            FirstClickEvent()\r\n        }\r\n        if(clickedField.isHidden && !clickedField.isFlag){\r\n            LmbClickHidden(clickedField);\r\n            // mouseDownField.btn.removeEventListener('mouseleave', MouseLeave)\r\n        } else if (!clickedField.isHidden) {\r\n            LmbClickShown(clickedField);\r\n        }\r\n    }\r\n}\r\n\r\nfunction LmbClickShown(clickedField:Field){\r\n    var nearBombs = clickedField.nBombs;\r\n    var flaggedFields = 0;\r\n    \r\n    var safeFields:Field[] = [];\r\n\r\n    offset.forEach(function(offPoint){\r\n        var tempPoint = clickedField.pnt.Add_Point(offPoint)\r\n        if (!tempPoint.Inside_Boundries(rows, columns)){\r\n            return;\r\n        }\r\n\r\n        var fieldToBeClicked = mapGrid[tempPoint.row][tempPoint.col]\r\n        if (fieldToBeClicked.isFlag){\r\n            flaggedFields++;\r\n        } else if (fieldToBeClicked.isHidden){\r\n            safeFields.push(fieldToBeClicked)\r\n        }\r\n    })\r\n\r\n    if(flaggedFields == nearBombs){\r\n        safeFields.forEach(function(fTC){\r\n            if (fTC.isHidden){\r\n                LmbClickHidden(fTC)\r\n            }\r\n        })\r\n    } else {\r\n        console.log(temporaryShownFields)\r\n        if (temporaryShownFields.length != 0){\r\n            temporaryShownFields.forEach(function(field){\r\n                field.btn.setAttribute('class', 'hidden')\r\n            })\r\n        }\r\n    }\r\n    temporaryShownFields = []\r\n}\r\nfunction LmbClickHidden(clickedField:Field){\r\n    var btn:HTMLButtonElement = clickedField.btn;\r\n    if (clickedField.isBomb){\r\n        btn.setAttribute('class', 'bomb')\r\n        GameOver(false);\r\n        return;\r\n    }\r\n    if(clickedField.isFlag){\r\n        return;\r\n    }\r\n    clickedField.isHidden = false;\r\n    clickedField.btn.innerHTML = clickedField.nBombs == 0 ? \"\" : `${clickedField.nBombs}`\r\n    clickedField.btn.setAttribute('style', `color: ${numberColors[clickedField.nBombs]};`)\r\n    clickedField.btn.setAttribute('class', 'shown')\r\n\r\n    shownFieldsCount++;\r\n\r\n    if (clickedField.nBombs == 0){\r\n        offset.forEach(function(offPoint){\r\n            var tempPoint = clickedField.pnt.Add_Point(offPoint)\r\n            if(tempPoint.Inside_Boundries(rows, columns)){\r\n                var tempField:Field = mapGrid[tempPoint.row][tempPoint.col];\r\n                if (tempField.isHidden == true && tempField.isFlag == false){\r\n                    LmbClickHidden(tempField);\r\n                }\r\n            }\r\n        })\r\n    }\r\n    if (shownFieldsCount == columns * rows - bombs)\r\n    {\r\n        GameOver(true);\r\n    }\r\n}\r\n\r\nfunction RmbClick(clickedField:Field){\r\n    if(clickedField.isHidden){\r\n        if (firstClick){\r\n            FirstClickEvent()\r\n        }\r\n\r\n        clickedField.isFlag = !clickedField.isFlag;\r\n        bombsRemaining += clickedField.isFlag ? -1 : 1\r\n        updateCounters()\r\n        var className = clickedField.isFlag ? 'flagged' : 'hidden'\r\n        clickedField.btn.setAttribute('class', className)\r\n    }\r\n}"]}